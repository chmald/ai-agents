version: '3.8'

services:
  # API Gateway
  api-gateway:
    build: ./api
    ports:
      - "8000:8000"
    environment:
      - CODING_AGENT_URL=http://coding-agent:8081
      - MARKETING_AGENT_URL=http://marketing-agent:8082
      - SECURITY_AGENT_URL=http://security-agent:8083
      - BIZDEV_AGENT_URL=http://bizdev-agent:8084
      - DATABASE_URL=postgresql://ecosystem:password@postgres:5432/ecosystem
      - REDIS_URL=redis://redis:6379
    depends_on:
      - postgres
      - redis
      - coding-agent
      - marketing-agent
      - security-agent
      - bizdev-agent
    networks:
      - ecosystem

  # AI Agents
  coding-agent:
    build:
      context: .
      dockerfile: ./agents/coding_agent/Dockerfile
    ports:
      - "8081:8081"
    environment:
      - AZURE_OPENAI_API_KEY=${AZURE_OPENAI_API_KEY}
      - AZURE_OPENAI_ENDPOINT=${AZURE_OPENAI_ENDPOINT}
      - AZURE_OPENAI_DEPLOYMENT_NAME=${AZURE_OPENAI_DEPLOYMENT_NAME:-gpt-4o-mini}
      - AZURE_OPENAI_API_VERSION=${AZURE_OPENAI_API_VERSION:-2024-02-15-preview}
      - GITLAB_TOKEN=${GITLAB_TOKEN}
      - GITLAB_URL=${GITLAB_URL:-https://gitlab.com/api/v4}
    networks:
      - ecosystem

  marketing-agent:
    build:
      context: .
      dockerfile: ./agents/marketing_agent/Dockerfile
    ports:
      - "8082:8082"
    environment:
      - AZURE_OPENAI_API_KEY=${AZURE_OPENAI_API_KEY}
      - AZURE_OPENAI_ENDPOINT=${AZURE_OPENAI_ENDPOINT}
      - AZURE_OPENAI_DEPLOYMENT_NAME=${AZURE_OPENAI_DEPLOYMENT_NAME:-gpt-4o-mini}
      - AZURE_OPENAI_API_VERSION=${AZURE_OPENAI_API_VERSION:-2024-02-15-preview}
      - TWITTER_BEARER_TOKEN=${TWITTER_BEARER_TOKEN}
      - SLACK_BOT_TOKEN=${SLACK_BOT_TOKEN}
    networks:
      - ecosystem

  security-agent:
    build:
      context: .
      dockerfile: ./agents/security_agent/Dockerfile
    ports:
      - "8083:8083"
    environment:
      - AZURE_OPENAI_API_KEY=${AZURE_OPENAI_API_KEY}
      - AZURE_OPENAI_ENDPOINT=${AZURE_OPENAI_ENDPOINT}
      - AZURE_OPENAI_DEPLOYMENT_NAME=${AZURE_OPENAI_DEPLOYMENT_NAME:-gpt-4o-mini}
      - AZURE_OPENAI_API_VERSION=${AZURE_OPENAI_API_VERSION:-2024-02-15-preview}
    networks:
      - ecosystem

  bizdev-agent:
    build:
      context: .
      dockerfile: ./agents/bizdev_agent/Dockerfile
    ports:
      - "8084:8084"
    environment:
      - AZURE_OPENAI_API_KEY=${AZURE_OPENAI_API_KEY}
      - AZURE_OPENAI_ENDPOINT=${AZURE_OPENAI_ENDPOINT}
      - AZURE_OPENAI_DEPLOYMENT_NAME=${AZURE_OPENAI_DEPLOYMENT_NAME:-gpt-4o-mini}
      - AZURE_OPENAI_API_VERSION=${AZURE_OPENAI_API_VERSION:-2024-02-15-preview}
      - SALESFORCE_INSTANCE_URL=${SALESFORCE_INSTANCE_URL}
      - SALESFORCE_ACCESS_TOKEN=${SALESFORCE_ACCESS_TOKEN}
      - SLACK_BOT_TOKEN=${SLACK_BOT_TOKEN}
    networks:
      - ecosystem

  # Supporting Services
  licensing-service:
    build: ./services/licensing
    ports:
      - "8085:8085"
    environment:
      - DATABASE_URL=postgresql://ecosystem:password@postgres:5432/ecosystem
    depends_on:
      - postgres
    networks:
      - ecosystem

  # Infrastructure Services
  postgres:
    image: postgres:15
    environment:
      - POSTGRES_DB=ecosystem
      - POSTGRES_USER=ecosystem
      - POSTGRES_PASSWORD=password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    ports:
      - "5432:5432"
    networks:
      - ecosystem

  redis:
    image: redis:7
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - ecosystem

  keycloak:
    image: quay.io/keycloak/keycloak:22.0
    environment:
      - KEYCLOAK_ADMIN=admin
      - KEYCLOAK_ADMIN_PASSWORD=admin
      - KC_DB=postgres
      - KC_DB_URL=jdbc:postgresql://postgres:5432/keycloak
      - KC_DB_USERNAME=keycloak
      - KC_DB_PASSWORD=keycloak
    ports:
      - "8080:8080"
    depends_on:
      - postgres
    command: start-dev
    networks:
      - ecosystem

  # Monitoring Stack
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./services/metrics/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
      - '--web.enable-lifecycle'
    networks:
      - ecosystem

  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./services/metrics/grafana:/etc/grafana/provisioning
    depends_on:
      - prometheus
    networks:
      - ecosystem

  # Message Queue
  kafka:
    image: confluentinc/cp-kafka:latest
    environment:
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: true
    ports:
      - "9092:9092"
    depends_on:
      - zookeeper
    networks:
      - ecosystem

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - ecosystem

  # Reverse Proxy
  traefik:
    image: traefik:v3.0
    command:
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
    ports:
      - "80:80"
      - "443:443"
      - "8090:8080" # Traefik dashboard
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
    networks:
      - ecosystem

volumes:
  postgres_data:
  redis_data:
  prometheus_data:
  grafana_data:

networks:
  ecosystem:
    driver: bridge