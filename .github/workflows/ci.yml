# CI/CD workflow for AI-Powered Business Ecosystem
name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.11]

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r api/requirements.txt
        pip install -r llm/requirements.txt
        pip install pytest pytest-asyncio
    
    - name: Run tests
      run: |
        pytest tests/ -v
    
    - name: Lint code
      run: |
        pip install flake8 black
        flake8 api/ agents/ llm/ --max-line-length=100
        black --check api/ agents/ llm/

  build:
    needs: test
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build API Gateway
      run: |
        docker build -t ai-ecosystem/api-gateway ./api
    
    - name: Build Coding Agent
      run: |
        docker build -t ai-ecosystem/coding-agent ./agents/coding_agent
    
    - name: Build Marketing Agent
      run: |
        docker build -t ai-ecosystem/marketing-agent ./agents/marketing_agent
    
    - name: Test Docker Compose
      run: |
        cp .env.example .env
        docker-compose config

  security-scan:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  deploy:
    needs: [test, build]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Deploy to production
      run: |
        echo "Deploying to production environment"
        # Add deployment logic here
        # - Build and push Docker images
        # - Deploy to Kubernetes
        # - Update Helm charts